#ifndef InspectWebsite_PrefixHeader_pch
#define InspectWebsite_PrefixHeader_pch

#import "lang.h"
#import "AppState.h"
#import "MBProgressHUD.h"
#import "UIHelper.h"
#import "Storage.h"
#import "UserOptions.h"

#define RECENT_DOMAINS_KEY @"RECENT_DOMAINS"
#define INSPECT_NOTIFICATION @"INSPECT_THIS_WEBSITE"
#define INSPECT_NOTIFICATION_HOST_KEY @"host"
#define INSPECT_NOTIFICATION_INDEX_KEY @"index"
#define RELOAD_CERT_NOTIFICATION @"ü§î"
#define CHANGE_THEME_NOTIFICATION @"üè≥Ô∏è‚Äçüåà"

#if DEBUG
#define d(s, ...) NSLog(s, ##__VA_ARGS__)
#else
#define d(s, ...) ;
#endif

#define l(keyString) [lang key:keyString]
#define lv(keyString, argsArray) [lang key:keyString args:argsArray]

#define AppDefaults Storage.sharedInstance.groupDefaults
#define uihelper [UIHelper sharedInstance]
#define usingLightTheme appState.lightTheme
#define colorForTheme(light, dark) usingLightTheme ? light : dark
#define themeTextColor colorForTheme([UIColor blackColor], [UIColor whiteColor])

#define format(fmt, ...) [NSString stringWithFormat:fmt, ##__VA_ARGS__]
#define nstrcat(s1, s2) [NSString stringWithFormat:@"%@%@", s1, s2]

#define open_url(url) [[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]]

#define notify(nname) [[NSNotificationCenter defaultCenter] postNotificationName:nname object:nil]
#define subscribe(sel, nname) [[NSNotificationCenter defaultCenter] addObserver:self selector:sel name:nname object:nil]

#define appState [AppState currentState]
#define currentChain appState.certificateChain
#define currentServerInfo appState.serverInfo
#define selectedCertificate appState.selectedCertificate
#define isCompact appState.splitViewController.traitCollection.horizontalSizeClass == UIUserInterfaceSizeClassCompact
#define isRegular appState.splitViewController.traitCollection.horizontalSizeClass == UIUserInterfaceSizeClassRegular

#endif
